package com.test;

/**
 * Created by fzy on 17-3-18.
 *
 * 在计算机中，由于处理器位宽限制，只能处理有限精度的十进制整数加减法，比如在32位宽处理器计算机中，
 参与运算的操作数和结果必须在-231~231-1之间。如果需要进行更大范围的十进制整数加法，需要使用特殊
 的方式实现，比如使用字符串保存操作数和结果，采取逐位运算的方式。如下：
 9876543210 + 1234567890 = ?
 让字符串 num1="9876543210"，字符串 num2="1234567890"，结果保存在字符串 result = "11111111100"。
 -9876543210 + (-1234567890) = ?
 让字符串 num1="-9876543210"，字符串 num2="-1234567890"，结果保存在字符串 result = "-11111111100"。
 要求编程实现上述高精度的十进制加法。
 要求实现函数：
 void add (const char *num1, const char *num2, char *result)
 【输入】num1：字符串形式操作数1，如果操作数为负，则num1[0]为符号位'-'
 num2：字符串形式操作数2，如果操作数为负，则num2[0]为符号位'-'
 【输出】result：保存加法计算结果字符串，如果结果为负，则result[0]为符号位。
 注：
 I、   当输入为正数时，'+'不会出现在输入字符串中；当输入为负数时，'-'会出现在输入字符串中，且一定在输入字符串最左边位置；
 II、  输入字符串所有位均代表有效数字，即不存在由'0'开始的输入字符串，比如"0012", "-0012"不会出现；
 III、       要求输出字符串所有位均为有效数字，结果为正或0时'+'不出现在输出字符串，结果为负时输出字符串最左边位置为'-'。
 *
 */
public class High_Precision_Addition {
}
